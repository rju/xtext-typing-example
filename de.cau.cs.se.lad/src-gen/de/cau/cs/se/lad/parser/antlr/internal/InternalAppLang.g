/*
* generated by Xtext
*/
grammar InternalAppLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.se.lad.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.se.lad.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.se.lad.services.AppLangGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AppLangGrammarAccess grammarAccess;
 	
    public InternalAppLangParser(TokenStream input, AppLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AppLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getServicesServiceParserRuleCall_0_0_0()); 
	    }
		lv_services_0_0=ruleService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"services",
        		lv_services_0_0, 
        		"Service");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getViewsViewParserRuleCall_0_1_0()); 
	    }
		lv_views_1_0=ruleView		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"views",
        		lv_views_1_0, 
        		"View");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClassesClassParserRuleCall_0_2_0()); 
	    }
		lv_classes_2_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_2_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getModelDataModelParserRuleCall_1_0()); 
	    }
		lv_model_3_0=ruleDataModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_3_0, 
        		"DataModel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getExtendsKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getClassAccess().getParentClassTypeCrossReference_2_1_0()); 
	}

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getPropertiesPropertyParserRuleCall_4_0()); 
	    }
		lv_properties_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='service' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getConfigurationsPropertyParserRuleCall_3_0()); 
	    }
		lv_configurations_3_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"configurations",
        		lv_configurations_3_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getConfigurationsPropertyParserRuleCall_4_1_0()); 
	    }
		lv_configurations_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"configurations",
        		lv_configurations_5_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getOperationsOperationParserRuleCall_7_0()); 
	    }
		lv_operations_8_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_8_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='op' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getOpKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getTypeTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParametersPropertyParserRuleCall_4_0()); 
	    }
		lv_parameters_4_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParametersPropertyParserRuleCall_5_1_0()); 
	    }
		lv_parameters_6_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOperationAccess().getRightParenthesisKeyword_6());
    }
	otherlv_8='return' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOperationAccess().getReturnKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getExpressionExpressionParserRuleCall_8_0()); 
	    }
		lv_expression_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBaseExpressionParserRuleCall_0()); 
    }
    this_BaseExpression_0=ruleBaseExpression
    { 
        $current = $this_BaseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightBaseExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBaseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BaseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	 iv_ruleBaseExpression=ruleBaseExpression 
	 { $current=$iv_ruleBaseExpression.current; } 
	 EOF 
;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getFunctionParserRuleCall_0()); 
    }
    this_Function_0=ruleFunction
    { 
        $current = $this_Function_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getNullLiteralParserRuleCall_1()); 
    }
    this_NullLiteral_1=ruleNullLiteral
    { 
        $current = $this_NullLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getStringExpressionParserRuleCall_2()); 
    }
    this_StringExpression_2=ruleStringExpression
    { 
        $current = $this_StringExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringExpressionAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStringExpressionAccess().getStringExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStringExpressionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringExpressionAccess().getRightStringValueParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleStringValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"StringValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringValueAccess().getStringLiteralParserRuleCall_0()); 
    }
    this_StringLiteral_0=ruleStringLiteral
    { 
        $current = $this_StringLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringValueAccess().getStringPropertyParserRuleCall_1()); 
    }
    this_StringProperty_1=ruleStringProperty
    { 
        $current = $this_StringProperty_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringProperty
entryRuleStringProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringPropertyRule()); }
	 iv_ruleStringProperty=ruleStringProperty 
	 { $current=$iv_ruleStringProperty.current; } 
	 EOF 
;

// Rule StringProperty
ruleStringProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringPropertyRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getStringPropertyAccess().getReferencePropertyCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_literal_0_0=RULE_STRING
		{
			newLeafNode(lv_literal_0_0, grammarAccess.getStringLiteralAccess().getLiteralSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getNameFunctionEnumEnumRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleFunctionEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FunctionEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExpressionsExpressionParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExpressionsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expressions_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeReferenceAccess().getArrayTypeAction_0_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTypeReferenceAccess().getTypeTypeCrossReference_0_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeReferenceAccess().getLeftSquareBracketKeyword_0_2());
    }
(
(
		lv_size_3_0=RULE_INT
		{
			newLeafNode(lv_size_3_0, grammarAccess.getTypeReferenceAccess().getSizeINTTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_3_0, 
        		"INT");
	    }

)
)?	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeReferenceAccess().getRightSquareBracketKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeReferenceAccess().getTypeReferenceAction_1_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getTypeReferenceAccess().getTypeTypeCrossReference_1_1_0()); 
	}

)
)(	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceAccess().getRemainderTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_remainder_8_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceRule());
	        }
       		set(
       			$current, 
       			"remainder",
        		lv_remainder_8_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleDataModel
entryRuleDataModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataModelRule()); }
	 iv_ruleDataModel=ruleDataModel 
	 { $current=$iv_ruleDataModel.current; } 
	 EOF 
;

// Rule DataModel
ruleDataModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataModelAccess().getDataModelAction_0(),
            $current);
    }
)	otherlv_1='model' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataModelAccess().getModelKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataModelAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataModelAccess().getInstancesInstanceParserRuleCall_3_0()); 
	    }
		lv_instances_3_0=ruleInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataModelRule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_3_0, 
        		"Instance");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='start' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataModelAccess().getStartKeyword_4());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataModelRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getDataModelAccess().getViewInstanceCrossReference_5_0()); 
	}

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataModelAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleInstance
entryRuleInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceRule()); }
	 iv_ruleInstance=ruleInstance 
	 { $current=$iv_ruleInstance.current; } 
	 EOF 
;

// Rule Instance
ruleInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstanceAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceAccess().getTypeTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleView
entryRuleView returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewRule()); }
	 iv_ruleView=ruleView 
	 { $current=$iv_ruleView.current; } 
	 EOF 
;

// Rule View
ruleView returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='view' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getViewAccess().getViewKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getViewAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getViewAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getViewAccess().getLayoutLayoutParserRuleCall_3_0()); 
	    }
		lv_layout_3_0=ruleLayout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewRule());
	        }
       		set(
       			$current, 
       			"layout",
        		lv_layout_3_0, 
        		"Layout");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getViewAccess().getContentsViewContentParserRuleCall_4_0()); 
	    }
		lv_contents_4_0=ruleViewContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewRule());
	        }
       		add(
       			$current, 
       			"contents",
        		lv_contents_4_0, 
        		"ViewContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getViewAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleViewContent
entryRuleViewContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewContentRule()); }
	 iv_ruleViewContent=ruleViewContent 
	 { $current=$iv_ruleViewContent.current; } 
	 EOF 
;

// Rule ViewContent
ruleViewContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getViewContentAccess().getViewElementParserRuleCall_0()); 
    }
    this_ViewElement_0=ruleViewElement
    { 
        $current = $this_ViewElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getViewContentAccess().getViewContainerParserRuleCall_1()); 
    }
    this_ViewContainer_1=ruleViewContainer
    { 
        $current = $this_ViewContainer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleViewContainer
entryRuleViewContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewContainerRule()); }
	 iv_ruleViewContainer=ruleViewContainer 
	 { $current=$iv_ruleViewContainer.current; } 
	 EOF 
;

// Rule ViewContainer
ruleViewContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='container' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getViewContainerAccess().getContainerKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getViewContainerAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getViewContainerAccess().getLayoutLayoutParserRuleCall_2_0()); 
	    }
		lv_layout_2_0=ruleLayout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewContainerRule());
	        }
       		set(
       			$current, 
       			"layout",
        		lv_layout_2_0, 
        		"Layout");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getViewContainerAccess().getContentsViewContentParserRuleCall_3_0()); 
	    }
		lv_contents_3_0=ruleViewContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewContainerRule());
	        }
       		add(
       			$current, 
       			"contents",
        		lv_contents_3_0, 
        		"ViewContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getViewContainerAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleViewElement
entryRuleViewElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewElementRule()); }
	 iv_ruleViewElement=ruleViewElement 
	 { $current=$iv_ruleViewElement.current; } 
	 EOF 
;

// Rule ViewElement
ruleViewElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getViewElementAccess().getTypeViewTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleViewType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewElementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ViewType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getViewElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getViewElementAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getViewElementAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLayoutRule()); }
	 iv_ruleLayout=ruleLayout 
	 { $current=$iv_ruleLayout.current; } 
	 EOF 
;

// Rule Layout
ruleLayout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLayoutAccess().getStackLayoutParserRuleCall_0()); 
    }
    this_StackLayout_0=ruleStackLayout
    { 
        $current = $this_StackLayout_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLayoutAccess().getGridLayoutParserRuleCall_1()); 
    }
    this_GridLayout_1=ruleGridLayout
    { 
        $current = $this_GridLayout_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGridLayout
entryRuleGridLayout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGridLayoutRule()); }
	 iv_ruleGridLayout=ruleGridLayout 
	 { $current=$iv_ruleGridLayout.current; } 
	 EOF 
;

// Rule GridLayout
ruleGridLayout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGridLayoutAccess().getSizeSizeParserRuleCall_0_0()); 
	    }
		lv_size_0_0=ruleSize		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGridLayoutRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_0_0, 
        		"Size");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGridLayoutAccess().getFieldsFieldParserRuleCall_1_0()); 
	    }
		lv_fields_1_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGridLayoutRule());
	        }
       		set(
       			$current, 
       			"fields",
        		lv_fields_1_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getLessThanSignKeyword_0());
    }
(
(
		lv_width_1_0=RULE_INT
		{
			newLeafNode(lv_width_1_0, grammarAccess.getFieldAccess().getWidthINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"width",
        		lv_width_1_0, 
        		"INT");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getCommaKeyword_2());
    }
(
(
		lv_height_3_0=RULE_INT
		{
			newLeafNode(lv_height_3_0, grammarAccess.getFieldAccess().getHeightINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"height",
        		lv_height_3_0, 
        		"INT");
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleStackLayout
entryRuleStackLayout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStackLayoutRule()); }
	 iv_ruleStackLayout=ruleStackLayout 
	 { $current=$iv_ruleStackLayout.current; } 
	 EOF 
;

// Rule StackLayout
ruleStackLayout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStackLayoutAccess().getSizeSizeParserRuleCall_0_0()); 
	    }
		lv_size_0_0=ruleSize		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStackLayoutRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_0_0, 
        		"Size");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStackLayoutAccess().getDirectionDirectionEnumRuleCall_1_0()); 
	    }
		lv_direction_1_0=ruleDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStackLayoutRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_1_0, 
        		"Direction");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	 iv_ruleSize=ruleSize 
	 { $current=$iv_ruleSize.current; } 
	 EOF 
;

// Rule Size
ruleSize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSizeAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSizeAccess().getWidthSizeExprParserRuleCall_1_0()); 
	    }
		lv_width_1_0=ruleSizeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSizeRule());
	        }
       		set(
       			$current, 
       			"width",
        		lv_width_1_0, 
        		"SizeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSizeAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSizeAccess().getHeightSizeExprParserRuleCall_3_0()); 
	    }
		lv_height_3_0=ruleSizeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSizeRule());
	        }
       		set(
       			$current, 
       			"height",
        		lv_height_3_0, 
        		"SizeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSizeAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleSizeExpr
entryRuleSizeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSizeExprRule()); }
	 iv_ruleSizeExpr=ruleSizeExpr 
	 { $current=$iv_ruleSizeExpr.current; } 
	 EOF 
;

// Rule SizeExpr
ruleSizeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getSizeExprAccess().getValueINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSizeExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSizeExprAccess().getUnitUnitEnumRuleCall_1_0()); 
	    }
		lv_unit_1_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSizeExprRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_1_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule FunctionEnum
ruleFunctionEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='decode' 
	{
        $current = grammarAccess.getFunctionEnumAccess().getDECODEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFunctionEnumAccess().getDECODEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='encode' 
	{
        $current = grammarAccess.getFunctionEnumAccess().getENCODEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFunctionEnumAccess().getENCODEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='get' 
	{
        $current = grammarAccess.getFunctionEnumAccess().getGETEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFunctionEnumAccess().getGETEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='put' 
	{
        $current = grammarAccess.getFunctionEnumAccess().getPUTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFunctionEnumAccess().getPUTEnumLiteralDeclaration_3()); 
    }
));



// Rule ViewType
ruleViewType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='button' 
	{
        $current = grammarAccess.getViewTypeAccess().getButtonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getViewTypeAccess().getButtonEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='value-spinner' 
	{
        $current = grammarAccess.getViewTypeAccess().getValueSpinnerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getViewTypeAccess().getValueSpinnerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='date-spinner' 
	{
        $current = grammarAccess.getViewTypeAccess().getDateSpinnerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getViewTypeAccess().getDateSpinnerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='label' 
	{
        $current = grammarAccess.getViewTypeAccess().getLabelEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getViewTypeAccess().getLabelEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='text' 
	{
        $current = grammarAccess.getViewTypeAccess().getTextOutputEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getViewTypeAccess().getTextOutputEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='input' 
	{
        $current = grammarAccess.getViewTypeAccess().getInputFieldEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getViewTypeAccess().getInputFieldEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='canvas' 
	{
        $current = grammarAccess.getViewTypeAccess().getCanvasEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getViewTypeAccess().getCanvasEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='tree-list' 
	{
        $current = grammarAccess.getViewTypeAccess().getTreeListEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getViewTypeAccess().getTreeListEnumLiteralDeclaration_7()); 
    }
));



// Rule Unit
ruleUnit returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='px' 
	{
        $current = grammarAccess.getUnitAccess().getPXEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnitAccess().getPXEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='%' 
	{
        $current = grammarAccess.getUnitAccess().getPERCENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnitAccess().getPERCENTEnumLiteralDeclaration_1()); 
    }
));



// Rule Direction
ruleDirection returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='horizontal' 
	{
        $current = grammarAccess.getDirectionAccess().getHORIZONTALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getHORIZONTALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='vertical' 
	{
        $current = grammarAccess.getDirectionAccess().getVERTICALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getVERTICALEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


