/*
* generated by Xtext
*/

package de.cau.cs.se.lad.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AppLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cServicesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cServicesServiceParserRuleCall_0_0_0 = (RuleCall)cServicesAssignment_0_0.eContents().get(0);
		private final Assignment cViewsAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cViewsViewParserRuleCall_0_1_0 = (RuleCall)cViewsAssignment_0_1.eContents().get(0);
		private final Assignment cClassesAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cClassesClassParserRuleCall_0_2_0 = (RuleCall)cClassesAssignment_0_2.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelDataModelParserRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		
		//Model:
		//	(services+=Service | views+=View | classes+=Class)* model=DataModel;
		public ParserRule getRule() { return rule; }

		//(services+=Service | views+=View | classes+=Class)* model=DataModel
		public Group getGroup() { return cGroup; }

		//(services+=Service | views+=View | classes+=Class)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//services+=Service
		public Assignment getServicesAssignment_0_0() { return cServicesAssignment_0_0; }

		//Service
		public RuleCall getServicesServiceParserRuleCall_0_0_0() { return cServicesServiceParserRuleCall_0_0_0; }

		//views+=View
		public Assignment getViewsAssignment_0_1() { return cViewsAssignment_0_1; }

		//View
		public RuleCall getViewsViewParserRuleCall_0_1_0() { return cViewsViewParserRuleCall_0_1_0; }

		//classes+=Class
		public Assignment getClassesAssignment_0_2() { return cClassesAssignment_0_2; }

		//Class
		public RuleCall getClassesClassParserRuleCall_0_2_0() { return cClassesClassParserRuleCall_0_2_0; }

		//model=DataModel
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//DataModel
		public RuleCall getModelDataModelParserRuleCall_1_0() { return cModelDataModelParserRuleCall_1_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentClassTypeCrossReference_2_1_0 = (CrossReference)cParentAssignment_2_1.eContents().get(0);
		private final RuleCall cParentClassTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParentClassTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class returns types::ClassType:
		//	"class" name=ID ("extends" parent=[types::ClassType])? "{" properties+=Property+ "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" parent=[types::ClassType])? "{" properties+=Property+ "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" parent=[types::ClassType])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//parent=[types::ClassType]
		public Assignment getParentAssignment_2_1() { return cParentAssignment_2_1; }

		//[types::ClassType]
		public CrossReference getParentClassTypeCrossReference_2_1_0() { return cParentClassTypeCrossReference_2_1_0; }

		//ID
		public RuleCall getParentClassTypeIDTerminalRuleCall_2_1_0_1() { return cParentClassTypeIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=Property+
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigurationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigurationsPropertyParserRuleCall_3_0 = (RuleCall)cConfigurationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConfigurationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConfigurationsPropertyParserRuleCall_4_1_0 = (RuleCall)cConfigurationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperationsOperationParserRuleCall_7_0 = (RuleCall)cOperationsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Service returns types::ServiceType:
		//	"service" name=ID "(" configurations+=Property ("," configurations+=Property)* ")" "{" operations+=Operation+ "}";
		public ParserRule getRule() { return rule; }

		//"service" name=ID "(" configurations+=Property ("," configurations+=Property)* ")" "{" operations+=Operation+ "}"
		public Group getGroup() { return cGroup; }

		//"service"
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//configurations+=Property
		public Assignment getConfigurationsAssignment_3() { return cConfigurationsAssignment_3; }

		//Property
		public RuleCall getConfigurationsPropertyParserRuleCall_3_0() { return cConfigurationsPropertyParserRuleCall_3_0; }

		//("," configurations+=Property)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//configurations+=Property
		public Assignment getConfigurationsAssignment_4_1() { return cConfigurationsAssignment_4_1; }

		//Property
		public RuleCall getConfigurationsPropertyParserRuleCall_4_1_0() { return cConfigurationsPropertyParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//operations+=Operation+
		public Assignment getOperationsAssignment_7() { return cOperationsAssignment_7; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_7_0() { return cOperationsOperationParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersPropertyParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersPropertyParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionExpressionParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		
		//Operation returns types::Operation:
		//	"op" type=TypeReference name=ID "(" parameters+=Property ("," parameters+=Property)* ")" "return"
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//"op" type=TypeReference name=ID "(" parameters+=Property ("," parameters+=Property)* ")" "return" expression=Expression
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_0() { return cTypeTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=Property
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//Property
		public RuleCall getParametersPropertyParserRuleCall_4_0() { return cParametersPropertyParserRuleCall_4_0; }

		//("," parameters+=Property)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=Property
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//Property
		public RuleCall getParametersPropertyParserRuleCall_5_1_0() { return cParametersPropertyParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"return"
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }

		//expression=Expression
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_0() { return cExpressionExpressionParserRuleCall_8_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBaseExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	BaseExpression ({Expression.left=current} "or" right=BaseExpression)?;
		public ParserRule getRule() { return rule; }

		//BaseExpression ({Expression.left=current} "or" right=BaseExpression)?
		public Group getGroup() { return cGroup; }

		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }

		//({Expression.left=current} "or" right=BaseExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right=BaseExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BaseExpression
		public RuleCall getRightBaseExpressionParserRuleCall_1_2_0() { return cRightBaseExpressionParserRuleCall_1_2_0; }
	}

	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BaseExpression:
		//	Function | NullLiteral | StringExpression;
		public ParserRule getRule() { return rule; }

		//Function | NullLiteral | StringExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_1() { return cNullLiteralParserRuleCall_1; }

		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_2() { return cStringExpressionParserRuleCall_2; }
	}

	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStringExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightStringValueParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//StringExpression:
		//	StringValue ({StringExpression.left=current} "+" right=StringValue)*;
		public ParserRule getRule() { return rule; }

		//StringValue ({StringExpression.left=current} "+" right=StringValue)*
		public Group getGroup() { return cGroup; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//({StringExpression.left=current} "+" right=StringValue)*
		public Group getGroup_1() { return cGroup_1; }

		//{StringExpression.left=current}
		public Action getStringExpressionLeftAction_1_0() { return cStringExpressionLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=StringValue
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//StringValue
		public RuleCall getRightStringValueParserRuleCall_1_2_0() { return cRightStringValueParserRuleCall_1_2_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringValue:
		//	StringLiteral | StringProperty;
		public ParserRule getRule() { return rule; }

		//StringLiteral | StringProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }

		//StringProperty
		public RuleCall getStringPropertyParserRuleCall_1() { return cStringPropertyParserRuleCall_1; }
	}

	public class StringPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringProperty");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencePropertyCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferencePropertyIDTerminalRuleCall_0_1 = (RuleCall)cReferencePropertyCrossReference_0.eContents().get(1);
		
		//StringProperty:
		//	reference=[types::Property];
		public ParserRule getRule() { return rule; }

		//reference=[types::Property]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }

		//[types::Property]
		public CrossReference getReferencePropertyCrossReference_0() { return cReferencePropertyCrossReference_0; }

		//ID
		public RuleCall getReferencePropertyIDTerminalRuleCall_0_1() { return cReferencePropertyIDTerminalRuleCall_0_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//StringLiteral:
		//	literal=STRING;
		public ParserRule getRule() { return rule; }

		//literal=STRING
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_0() { return cLiteralSTRINGTerminalRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFunctionEnumEnumRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//	name=FunctionEnum "(" expressions+=Expression ("," expressions+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//name=FunctionEnum "(" expressions+=Expression ("," expressions+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//name=FunctionEnum
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FunctionEnum
		public RuleCall getNameFunctionEnumEnumRuleCall_0_0() { return cNameFunctionEnumEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }

		//("," expressions+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Property returns types::Property:
		//	type=TypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//type=TypeReference name=ID
		public Group getGroup() { return cGroup; }

		//type=TypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_0_0() { return cTypeTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArrayTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTypeTypeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSizeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_0_3_0 = (RuleCall)cSizeAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRemainderAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRemainderTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cRemainderAssignment_1_2_1.eContents().get(0);
		
		//TypeReference returns types::TypeReference: // this btw. realizes the issue of allowing '[]' solely at the last position 
		//	{types::ArrayType} type=[types::Type] "[" size=INT? "]" | {types::TypeReference} type=[types::Type] ("."
		//	remainder=TypeReference)?;
		public ParserRule getRule() { return rule; }

		//// this btw. realizes the issue of allowing '[]' solely at the last position 
		//{types::ArrayType} type=[types::Type] "[" size=INT? "]" | {types::TypeReference} type=[types::Type] ("."
		//remainder=TypeReference)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//// this btw. realizes the issue of allowing '[]' solely at the last position 
		//{types::ArrayType} type=[types::Type] "[" size=INT? "]"
		public Group getGroup_0() { return cGroup_0; }

		//// this btw. realizes the issue of allowing '[]' solely at the last position 
		//{types::ArrayType}
		public Action getArrayTypeAction_0_0() { return cArrayTypeAction_0_0; }

		//type=[types::Type]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//[types::Type]
		public CrossReference getTypeTypeCrossReference_0_1_0() { return cTypeTypeCrossReference_0_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_1_0_1() { return cTypeTypeIDTerminalRuleCall_0_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }

		//size=INT?
		public Assignment getSizeAssignment_0_3() { return cSizeAssignment_0_3; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_0_3_0() { return cSizeINTTerminalRuleCall_0_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }

		//{types::TypeReference} type=[types::Type] ("." remainder=TypeReference)?
		public Group getGroup_1() { return cGroup_1; }

		//{types::TypeReference}
		public Action getTypeReferenceAction_1_0() { return cTypeReferenceAction_1_0; }

		//type=[types::Type]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//[types::Type]
		public CrossReference getTypeTypeCrossReference_1_1_0() { return cTypeTypeCrossReference_1_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_1_0_1; }

		//("." remainder=TypeReference)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//remainder=TypeReference
		public Assignment getRemainderAssignment_1_2_1() { return cRemainderAssignment_1_2_1; }

		//TypeReference
		public RuleCall getRemainderTypeReferenceParserRuleCall_1_2_1_0() { return cRemainderTypeReferenceParserRuleCall_1_2_1_0; }
	}

	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstancesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstancesInstanceParserRuleCall_3_0 = (RuleCall)cInstancesAssignment_3.eContents().get(0);
		private final Keyword cStartKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cViewInstanceCrossReference_5_0 = (CrossReference)cViewAssignment_5.eContents().get(0);
		private final RuleCall cViewInstanceIDTerminalRuleCall_5_0_1 = (RuleCall)cViewInstanceCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DataModel:
		//	{DataModel} "model" "{" instances+=Instance* // only instances of view types
		//	"start" view=[Instance] "}";
		public ParserRule getRule() { return rule; }

		//{DataModel} "model" "{" instances+=Instance* // only instances of view types
		//"start" view=[Instance] "}"
		public Group getGroup() { return cGroup; }

		//{DataModel}
		public Action getDataModelAction_0() { return cDataModelAction_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//instances+=Instance*
		public Assignment getInstancesAssignment_3() { return cInstancesAssignment_3; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_3_0() { return cInstancesInstanceParserRuleCall_3_0; }

		//// only instances of view types
		//"start"
		public Keyword getStartKeyword_4() { return cStartKeyword_4; }

		//view=[Instance]
		public Assignment getViewAssignment_5() { return cViewAssignment_5; }

		//[Instance]
		public CrossReference getViewInstanceCrossReference_5_0() { return cViewInstanceCrossReference_5_0; }

		//ID
		public RuleCall getViewInstanceIDTerminalRuleCall_5_0_1() { return cViewInstanceIDTerminalRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Instance:
		//	"new" type=TypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//"new" type=TypeReference name=ID
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_0() { return cTypeTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Assignment cContentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentsViewContentParserRuleCall_4_0 = (RuleCall)cContentsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//View:
		//	"view" name=ID "{" layout=Layout contents+=ViewContent* "}";
		public ParserRule getRule() { return rule; }

		//"view" name=ID "{" layout=Layout contents+=ViewContent* "}"
		public Group getGroup() { return cGroup; }

		//"view"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//layout=Layout
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_3_0() { return cLayoutLayoutParserRuleCall_3_0; }

		//contents+=ViewContent*
		public Assignment getContentsAssignment_4() { return cContentsAssignment_4; }

		//ViewContent
		public RuleCall getContentsViewContentParserRuleCall_4_0() { return cContentsViewContentParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ViewContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cViewElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViewContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ViewContent:
		//	ViewElement | ViewContainer;
		public ParserRule getRule() { return rule; }

		//ViewElement | ViewContainer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ViewElement
		public RuleCall getViewElementParserRuleCall_0() { return cViewElementParserRuleCall_0; }

		//ViewContainer
		public RuleCall getViewContainerParserRuleCall_1() { return cViewContainerParserRuleCall_1; }
	}

	public class ViewContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLayoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayoutLayoutParserRuleCall_2_0 = (RuleCall)cLayoutAssignment_2.eContents().get(0);
		private final Assignment cContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentsViewContentParserRuleCall_3_0 = (RuleCall)cContentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ViewContainer:
		//	"container" "{" layout=Layout contents+=ViewContent* "}";
		public ParserRule getRule() { return rule; }

		//"container" "{" layout=Layout contents+=ViewContent* "}"
		public Group getGroup() { return cGroup; }

		//"container"
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//layout=Layout
		public Assignment getLayoutAssignment_2() { return cLayoutAssignment_2; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_2_0() { return cLayoutLayoutParserRuleCall_2_0; }

		//contents+=ViewContent*
		public Assignment getContentsAssignment_3() { return cContentsAssignment_3; }

		//ViewContent
		public RuleCall getContentsViewContentParserRuleCall_3_0() { return cContentsViewContentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ViewElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeViewTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ViewElement:
		//	type=ViewType name=ID "{" "}";
		public ParserRule getRule() { return rule; }

		//type=ViewType name=ID "{" "}"
		public Group getGroup() { return cGroup; }

		//type=ViewType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ViewType
		public RuleCall getTypeViewTypeEnumRuleCall_0_0() { return cTypeViewTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStackLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGridLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Layout:
		//	StackLayout | GridLayout;
		public ParserRule getRule() { return rule; }

		//StackLayout | GridLayout
		public Alternatives getAlternatives() { return cAlternatives; }

		//StackLayout
		public RuleCall getStackLayoutParserRuleCall_0() { return cStackLayoutParserRuleCall_0; }

		//GridLayout
		public RuleCall getGridLayoutParserRuleCall_1() { return cGridLayoutParserRuleCall_1; }
	}

	public class GridLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSizeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSizeSizeParserRuleCall_0_0 = (RuleCall)cSizeAssignment_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		
		//GridLayout:
		//	size=Size fields=Field;
		public ParserRule getRule() { return rule; }

		//size=Size fields=Field
		public Group getGroup() { return cGroup; }

		//size=Size
		public Assignment getSizeAssignment_0() { return cSizeAssignment_0; }

		//Size
		public RuleCall getSizeSizeParserRuleCall_0_0() { return cSizeSizeParserRuleCall_0_0; }

		//fields=Field
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_0() { return cFieldsFieldParserRuleCall_1_0; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//	"<" width=INT "," height=INT ">";
		public ParserRule getRule() { return rule; }

		//"<" width=INT "," height=INT ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//height=INT
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_0() { return cHeightINTTerminalRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class StackLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StackLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSizeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSizeSizeParserRuleCall_0_0 = (RuleCall)cSizeAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		
		//StackLayout:
		//	size=Size direction=Direction;
		public ParserRule getRule() { return rule; }

		//size=Size direction=Direction
		public Group getGroup() { return cGroup; }

		//size=Size
		public Assignment getSizeAssignment_0() { return cSizeAssignment_0; }

		//Size
		public RuleCall getSizeSizeParserRuleCall_0_0() { return cSizeSizeParserRuleCall_0_0; }

		//direction=Direction
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_1_0() { return cDirectionDirectionEnumRuleCall_1_0; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthSizeExprParserRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightSizeExprParserRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Size:
		//	"<" width=SizeExpr "," height=SizeExpr ">";
		public ParserRule getRule() { return rule; }

		//"<" width=SizeExpr "," height=SizeExpr ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//width=SizeExpr
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }

		//SizeExpr
		public RuleCall getWidthSizeExprParserRuleCall_1_0() { return cWidthSizeExprParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//height=SizeExpr
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }

		//SizeExpr
		public RuleCall getHeightSizeExprParserRuleCall_3_0() { return cHeightSizeExprParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class SizeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//SizeExpr:
		//	value=INT unit=Unit;
		public ParserRule getRule() { return rule; }

		//value=INT unit=Unit
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=Unit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//Unit
		public RuleCall getUnitUnitEnumRuleCall_1_0() { return cUnitUnitEnumRuleCall_1_0; }
	}
	
	
	public class FunctionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDECODEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDECODEDecodeKeyword_0_0 = (Keyword)cDECODEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENCODEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENCODEEncodeKeyword_1_0 = (Keyword)cENCODEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGETGetKeyword_2_0 = (Keyword)cGETEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPUTPutKeyword_3_0 = (Keyword)cPUTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FunctionEnum:
		//	DECODE="decode" | ENCODE="encode" | GET="get" | PUT="put";
		public EnumRule getRule() { return rule; }

		//DECODE="decode" | ENCODE="encode" | GET="get" | PUT="put"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DECODE="decode"
		public EnumLiteralDeclaration getDECODEEnumLiteralDeclaration_0() { return cDECODEEnumLiteralDeclaration_0; }

		//"decode"
		public Keyword getDECODEDecodeKeyword_0_0() { return cDECODEDecodeKeyword_0_0; }

		//ENCODE="encode"
		public EnumLiteralDeclaration getENCODEEnumLiteralDeclaration_1() { return cENCODEEnumLiteralDeclaration_1; }

		//"encode"
		public Keyword getENCODEEncodeKeyword_1_0() { return cENCODEEncodeKeyword_1_0; }

		//GET="get"
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_2() { return cGETEnumLiteralDeclaration_2; }

		//"get"
		public Keyword getGETGetKeyword_2_0() { return cGETGetKeyword_2_0; }

		//PUT="put"
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_3() { return cPUTEnumLiteralDeclaration_3; }

		//"put"
		public Keyword getPUTPutKeyword_3_0() { return cPUTPutKeyword_3_0; }
	}

	public class ViewTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ViewType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cButtonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cButtonButtonKeyword_0_0 = (Keyword)cButtonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cValueSpinnerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cValueSpinnerValueSpinnerKeyword_1_0 = (Keyword)cValueSpinnerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDateSpinnerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDateSpinnerDateSpinnerKeyword_2_0 = (Keyword)cDateSpinnerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLabelEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLabelLabelKeyword_3_0 = (Keyword)cLabelEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTextOutputEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTextOutputTextKeyword_4_0 = (Keyword)cTextOutputEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInputFieldEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInputFieldInputKeyword_5_0 = (Keyword)cInputFieldEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCanvasEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCanvasCanvasKeyword_6_0 = (Keyword)cCanvasEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTreeListEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTreeListTreeListKeyword_7_0 = (Keyword)cTreeListEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ViewType:
		//	Button="button" | ValueSpinner="value-spinner" | DateSpinner="date-spinner" | Label="label" | TextOutput="text" |
		//	InputField="input" | Canvas="canvas" | TreeList="tree-list";
		public EnumRule getRule() { return rule; }

		//Button="button" | ValueSpinner="value-spinner" | DateSpinner="date-spinner" | Label="label" | TextOutput="text" |
		//InputField="input" | Canvas="canvas" | TreeList="tree-list"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Button="button"
		public EnumLiteralDeclaration getButtonEnumLiteralDeclaration_0() { return cButtonEnumLiteralDeclaration_0; }

		//"button"
		public Keyword getButtonButtonKeyword_0_0() { return cButtonButtonKeyword_0_0; }

		//ValueSpinner="value-spinner"
		public EnumLiteralDeclaration getValueSpinnerEnumLiteralDeclaration_1() { return cValueSpinnerEnumLiteralDeclaration_1; }

		//"value-spinner"
		public Keyword getValueSpinnerValueSpinnerKeyword_1_0() { return cValueSpinnerValueSpinnerKeyword_1_0; }

		//DateSpinner="date-spinner"
		public EnumLiteralDeclaration getDateSpinnerEnumLiteralDeclaration_2() { return cDateSpinnerEnumLiteralDeclaration_2; }

		//"date-spinner"
		public Keyword getDateSpinnerDateSpinnerKeyword_2_0() { return cDateSpinnerDateSpinnerKeyword_2_0; }

		//Label="label"
		public EnumLiteralDeclaration getLabelEnumLiteralDeclaration_3() { return cLabelEnumLiteralDeclaration_3; }

		//"label"
		public Keyword getLabelLabelKeyword_3_0() { return cLabelLabelKeyword_3_0; }

		//TextOutput="text"
		public EnumLiteralDeclaration getTextOutputEnumLiteralDeclaration_4() { return cTextOutputEnumLiteralDeclaration_4; }

		//"text"
		public Keyword getTextOutputTextKeyword_4_0() { return cTextOutputTextKeyword_4_0; }

		//InputField="input"
		public EnumLiteralDeclaration getInputFieldEnumLiteralDeclaration_5() { return cInputFieldEnumLiteralDeclaration_5; }

		//"input"
		public Keyword getInputFieldInputKeyword_5_0() { return cInputFieldInputKeyword_5_0; }

		//Canvas="canvas"
		public EnumLiteralDeclaration getCanvasEnumLiteralDeclaration_6() { return cCanvasEnumLiteralDeclaration_6; }

		//"canvas"
		public Keyword getCanvasCanvasKeyword_6_0() { return cCanvasCanvasKeyword_6_0; }

		//TreeList="tree-list"
		public EnumLiteralDeclaration getTreeListEnumLiteralDeclaration_7() { return cTreeListEnumLiteralDeclaration_7; }

		//"tree-list"
		public Keyword getTreeListTreeListKeyword_7_0() { return cTreeListTreeListKeyword_7_0; }
	}

	public class UnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPXPxKeyword_0_0 = (Keyword)cPXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPERCENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPERCENTPercentSignKeyword_1_0 = (Keyword)cPERCENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Unit:
		//	PX="px" | PERCENT="%";
		public EnumRule getRule() { return rule; }

		//PX="px" | PERCENT="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PX="px"
		public EnumLiteralDeclaration getPXEnumLiteralDeclaration_0() { return cPXEnumLiteralDeclaration_0; }

		//"px"
		public Keyword getPXPxKeyword_0_0() { return cPXPxKeyword_0_0; }

		//PERCENT="%"
		public EnumLiteralDeclaration getPERCENTEnumLiteralDeclaration_1() { return cPERCENTEnumLiteralDeclaration_1; }

		//"%"
		public Keyword getPERCENTPercentSignKeyword_1_0() { return cPERCENTPercentSignKeyword_1_0; }
	}

	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHORIZONTALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHORIZONTALHorizontalKeyword_0_0 = (Keyword)cHORIZONTALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERTICALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERTICALVerticalKeyword_1_0 = (Keyword)cVERTICALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Direction:
		//	HORIZONTAL="horizontal" | VERTICAL="vertical";
		public EnumRule getRule() { return rule; }

		//HORIZONTAL="horizontal" | VERTICAL="vertical"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HORIZONTAL="horizontal"
		public EnumLiteralDeclaration getHORIZONTALEnumLiteralDeclaration_0() { return cHORIZONTALEnumLiteralDeclaration_0; }

		//"horizontal"
		public Keyword getHORIZONTALHorizontalKeyword_0_0() { return cHORIZONTALHorizontalKeyword_0_0; }

		//VERTICAL="vertical"
		public EnumLiteralDeclaration getVERTICALEnumLiteralDeclaration_1() { return cVERTICALEnumLiteralDeclaration_1; }

		//"vertical"
		public Keyword getVERTICALVerticalKeyword_1_0() { return cVERTICALVerticalKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private ClassElements pClass;
	private ServiceElements pService;
	private OperationElements pOperation;
	private ExpressionElements pExpression;
	private BaseExpressionElements pBaseExpression;
	private StringExpressionElements pStringExpression;
	private StringValueElements pStringValue;
	private StringPropertyElements pStringProperty;
	private StringLiteralElements pStringLiteral;
	private NullLiteralElements pNullLiteral;
	private FunctionElements pFunction;
	private FunctionEnumElements unknownRuleFunctionEnum;
	private PropertyElements pProperty;
	private TypeReferenceElements pTypeReference;
	private DataModelElements pDataModel;
	private InstanceElements pInstance;
	private ViewElements pView;
	private ViewContentElements pViewContent;
	private ViewContainerElements pViewContainer;
	private ViewElementElements pViewElement;
	private ViewTypeElements unknownRuleViewType;
	private LayoutElements pLayout;
	private GridLayoutElements pGridLayout;
	private FieldElements pField;
	private StackLayoutElements pStackLayout;
	private SizeElements pSize;
	private SizeExprElements pSizeExpr;
	private UnitElements unknownRuleUnit;
	private DirectionElements unknownRuleDirection;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AppLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.lad.AppLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(services+=Service | views+=View | classes+=Class)* model=DataModel;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Class returns types::ClassType:
	//	"class" name=ID ("extends" parent=[types::ClassType])? "{" properties+=Property+ "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Service returns types::ServiceType:
	//	"service" name=ID "(" configurations+=Property ("," configurations+=Property)* ")" "{" operations+=Operation+ "}";
	public ServiceElements getServiceAccess() {
		return (pService != null) ? pService : (pService = new ServiceElements());
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//Operation returns types::Operation:
	//	"op" type=TypeReference name=ID "(" parameters+=Property ("," parameters+=Property)* ")" "return"
	//	expression=Expression;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Expression:
	//	BaseExpression ({Expression.left=current} "or" right=BaseExpression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BaseExpression:
	//	Function | NullLiteral | StringExpression;
	public BaseExpressionElements getBaseExpressionAccess() {
		return (pBaseExpression != null) ? pBaseExpression : (pBaseExpression = new BaseExpressionElements());
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}

	//StringExpression:
	//	StringValue ({StringExpression.left=current} "+" right=StringValue)*;
	public StringExpressionElements getStringExpressionAccess() {
		return (pStringExpression != null) ? pStringExpression : (pStringExpression = new StringExpressionElements());
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}

	//StringValue:
	//	StringLiteral | StringProperty;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//StringProperty:
	//	reference=[types::Property];
	public StringPropertyElements getStringPropertyAccess() {
		return (pStringProperty != null) ? pStringProperty : (pStringProperty = new StringPropertyElements());
	}
	
	public ParserRule getStringPropertyRule() {
		return getStringPropertyAccess().getRule();
	}

	//StringLiteral:
	//	literal=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//NullLiteral:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//Function:
	//	name=FunctionEnum "(" expressions+=Expression ("," expressions+=Expression)* ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//enum FunctionEnum:
	//	DECODE="decode" | ENCODE="encode" | GET="get" | PUT="put";
	public FunctionEnumElements getFunctionEnumAccess() {
		return (unknownRuleFunctionEnum != null) ? unknownRuleFunctionEnum : (unknownRuleFunctionEnum = new FunctionEnumElements());
	}
	
	public EnumRule getFunctionEnumRule() {
		return getFunctionEnumAccess().getRule();
	}

	//Property returns types::Property:
	//	type=TypeReference name=ID;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//TypeReference returns types::TypeReference: // this btw. realizes the issue of allowing '[]' solely at the last position 
	//	{types::ArrayType} type=[types::Type] "[" size=INT? "]" | {types::TypeReference} type=[types::Type] ("."
	//	remainder=TypeReference)?;
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//DataModel:
	//	{DataModel} "model" "{" instances+=Instance* // only instances of view types
	//	"start" view=[Instance] "}";
	public DataModelElements getDataModelAccess() {
		return (pDataModel != null) ? pDataModel : (pDataModel = new DataModelElements());
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}

	//Instance:
	//	"new" type=TypeReference name=ID;
	public InstanceElements getInstanceAccess() {
		return (pInstance != null) ? pInstance : (pInstance = new InstanceElements());
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//View:
	//	"view" name=ID "{" layout=Layout contents+=ViewContent* "}";
	public ViewElements getViewAccess() {
		return (pView != null) ? pView : (pView = new ViewElements());
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//ViewContent:
	//	ViewElement | ViewContainer;
	public ViewContentElements getViewContentAccess() {
		return (pViewContent != null) ? pViewContent : (pViewContent = new ViewContentElements());
	}
	
	public ParserRule getViewContentRule() {
		return getViewContentAccess().getRule();
	}

	//ViewContainer:
	//	"container" "{" layout=Layout contents+=ViewContent* "}";
	public ViewContainerElements getViewContainerAccess() {
		return (pViewContainer != null) ? pViewContainer : (pViewContainer = new ViewContainerElements());
	}
	
	public ParserRule getViewContainerRule() {
		return getViewContainerAccess().getRule();
	}

	//ViewElement:
	//	type=ViewType name=ID "{" "}";
	public ViewElementElements getViewElementAccess() {
		return (pViewElement != null) ? pViewElement : (pViewElement = new ViewElementElements());
	}
	
	public ParserRule getViewElementRule() {
		return getViewElementAccess().getRule();
	}

	//enum ViewType:
	//	Button="button" | ValueSpinner="value-spinner" | DateSpinner="date-spinner" | Label="label" | TextOutput="text" |
	//	InputField="input" | Canvas="canvas" | TreeList="tree-list";
	public ViewTypeElements getViewTypeAccess() {
		return (unknownRuleViewType != null) ? unknownRuleViewType : (unknownRuleViewType = new ViewTypeElements());
	}
	
	public EnumRule getViewTypeRule() {
		return getViewTypeAccess().getRule();
	}

	//Layout:
	//	StackLayout | GridLayout;
	public LayoutElements getLayoutAccess() {
		return (pLayout != null) ? pLayout : (pLayout = new LayoutElements());
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//GridLayout:
	//	size=Size fields=Field;
	public GridLayoutElements getGridLayoutAccess() {
		return (pGridLayout != null) ? pGridLayout : (pGridLayout = new GridLayoutElements());
	}
	
	public ParserRule getGridLayoutRule() {
		return getGridLayoutAccess().getRule();
	}

	//Field:
	//	"<" width=INT "," height=INT ">";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//StackLayout:
	//	size=Size direction=Direction;
	public StackLayoutElements getStackLayoutAccess() {
		return (pStackLayout != null) ? pStackLayout : (pStackLayout = new StackLayoutElements());
	}
	
	public ParserRule getStackLayoutRule() {
		return getStackLayoutAccess().getRule();
	}

	//Size:
	//	"<" width=SizeExpr "," height=SizeExpr ">";
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//SizeExpr:
	//	value=INT unit=Unit;
	public SizeExprElements getSizeExprAccess() {
		return (pSizeExpr != null) ? pSizeExpr : (pSizeExpr = new SizeExprElements());
	}
	
	public ParserRule getSizeExprRule() {
		return getSizeExprAccess().getRule();
	}

	//enum Unit:
	//	PX="px" | PERCENT="%";
	public UnitElements getUnitAccess() {
		return (unknownRuleUnit != null) ? unknownRuleUnit : (unknownRuleUnit = new UnitElements());
	}
	
	public EnumRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//enum Direction:
	//	HORIZONTAL="horizontal" | VERTICAL="vertical";
	public DirectionElements getDirectionAccess() {
		return (unknownRuleDirection != null) ? unknownRuleDirection : (unknownRuleDirection = new DirectionElements());
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
