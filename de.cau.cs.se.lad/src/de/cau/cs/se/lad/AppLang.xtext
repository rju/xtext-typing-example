grammar de.cau.cs.se.lad.AppLang with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.cau.cs.se.lad/model/Types.ecore" as types

generate appLang "http://www.cau.de/cs/se/lad/AppLang"

Model:
	(services+=Service | views+=View | classes+=Class)*
	model=DataModel
;

Class returns types::ClassType:
	'class' name=ID ('extends' parent=[types::ClassType|ID])? '{'
		properties+=Property+
	'}'
;

Service returns types::ServiceType:
	'service' name=ID '(' configurations+=Property (',' configurations+=Property)*  ')' '{'
		operations+=Operation+
	'}'
;

Operation returns types::Operation:
	'op' type=TypeReference name=ID '(' parameters+=Property (',' parameters+=Property)* ')'
		'return' expression=Expression
;

Expression:
	BaseExpression ({Expression.left=current} 'or' right=BaseExpression)?
;

BaseExpression:
	Function | NullLiteral | StringExpression
;

StringExpression:
	StringValue ({StringExpression.left=current} '+' right=StringValue)*
;

StringValue:
	StringLiteral | StringProperty
;

StringProperty:
	reference=[types::Property|ID]
;


StringLiteral:
	literal=STRING
;

NullLiteral: {NullLiteral}
	'null'
;


Function:
	name=FunctionEnum '(' expressions+=Expression (',' expressions+=Expression)* ')'
;

enum FunctionEnum:
	DECODE = 'decode' |
	ENCODE = 'encode' |
	GET = 'get' |
	PUT = 'put'
;

Property returns types::Property:
	type=TypeReference name=ID
;

TypeReference returns types::TypeReference:
    // this btw. realizes the issue of allowing '[]' solely at the last position 
    {types::ArrayType} type = [types::Type] '[' (size=INT)? ']'
    | {types::TypeReference} type = [types::Type] ('.' remainder=TypeReference)?
;

DataModel: {DataModel}
	'model' '{'
		instances+=Instance*
		// only instances of view types
		'start' view=[Instance|ID]
	'}'
;

Instance:
	'new' type=TypeReference name=ID 
;

View:
	'view' name=ID '{'
		layout=Layout
		contents+=ViewContent*
	'}'
;

ViewContent:
	ViewElement | ViewContainer
;

ViewContainer:
	'container' '{'
		layout=Layout
		contents+=ViewContent*
	'}'
;


ViewElement:
	type=ViewType name=ID '{'
		
	'}' 
;

enum ViewType:
	Button = 'button' |
	ValueSpinner = 'value-spinner' |
	DateSpinner = 'date-spinner' |
	Label = 'label' |
	TextOutput = 'text' |
	InputField = 'input' |
	Canvas = 'canvas' |
	TreeList = 'tree-list'
;

Layout:
	StackLayout | GridLayout
;

GridLayout:
	size=Size
	fields=Field
;

Field:
	'<' width=INT ',' height=INT '>'
;


StackLayout:
	size=Size
	direction=Direction	
;

Size:
	'<' width=SizeExpr ',' height=SizeExpr '>'
;

SizeExpr:
	value=INT unit=Unit
;

enum Unit:
	PX = 'px' |
	PERCENT = '%'
;




enum Direction:
	HORIZONTAL = 'horizontal' |
	VERTICAL = 'vertical'
;




